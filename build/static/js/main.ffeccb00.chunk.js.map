{"version":3,"sources":["components/Header.js","components/firebase.js","components/CartItem.js","components/CartItems.js","components/CartTotal.js","components/Cart.js","components/Product.js","components/Home.js","components/Login.js","App.js","reportWebVitals.js","index.js"],"names":["Header","cartItems","user","signOut","HeaderContainer","HeaderLogo","to","src","HeaderOptionAdress","HeaderOption","OptionLineOne","name","OptionLineTwo","HeaderSearch","HeaderSearchInput","type","HeaderSearchIconContainer","HeaderNavItems","onClick","HeaderOptionCart","CartCount","count","forEach","item","product","quantity","getCount","styled","div","input","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","auth","provider","GoogleAuthProvider","CartItem","id","options","i","Math","max","push","value","Container","ImageContainer","image","CartItemInfo","CartItemInfoTop","CartItemInfoBottom","CartItemQuantity","onChange","e","newQuantity","target","collection","doc","update","parseInt","CartItemDeleteContainer","preventDefault","delete","CartItemPrice","price","CartItems","Title","ItemsContainer","map","h1","CartTotal","getTotalPrice","Subtotal","displayType","thousandSeparator","prefix","CheckOutButton","h2","button","Cart","total","Product","title","rating","Price","Rating","Array","fill","Image","AddToCartContainer","AddToCartButton","cartItem","get","then","exists","data","set","span","img","Home","useState","products","setProducts","useEffect","onSnapshot","snapshot","tempProducts","docs","Banner","Content","Login","setUser","AmazonLogo","LoginButton","signInWithPopup","result","newUser","displayName","email","photo","photoURL","localStorage","setItem","JSON","stringify","catch","error","alert","message","App","parse","getItem","setCartItems","tempItems","removeItem","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffeccb00.chunk.js","sourcesContent":["import React from 'react'\r\nimport  styled from 'styled-components'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nfunction Header( { cartItems, user, signOut }) {\r\n\r\n    // function to count the amount of items in the cart\r\n\r\n    const getCount = () => {\r\n        let count = 0;\r\n        // first loop through all the cart items\r\n        cartItems.forEach((item) => {\r\n            // add the quantity of each one to total.\r\n            count += item.product.quantity;\r\n\r\n        })\r\n\r\n        return count;\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <HeaderContainer>\r\n            \r\n            <HeaderLogo>\r\n                <Link to=\"/\">\r\n                    <img src={\"https://i.imgur.com/7I9Was5.png\"}/>\r\n                </Link>\r\n            </HeaderLogo>\r\n            \r\n            <HeaderOptionAdress>\r\n                <LocationOnIcon />\r\n                <HeaderOption>\r\n                    <OptionLineOne>Hello {user.name}</OptionLineOne>\r\n                    <OptionLineTwo>Welcome to your store</OptionLineTwo>\r\n                </HeaderOption>\r\n            </HeaderOptionAdress>\r\n\r\n            <HeaderSearch>\r\n                \r\n                <HeaderSearchInput type='text' />\r\n                <HeaderSearchIconContainer>\r\n                    <SearchIcon />\r\n                </HeaderSearchIconContainer>\r\n            </HeaderSearch>\r\n\r\n            <HeaderNavItems>\r\n                <HeaderOption onClick={signOut}>\r\n                    <OptionLineOne>{user.name}</OptionLineOne>\r\n                    <OptionLineTwo>Log Out</OptionLineTwo>\r\n                </HeaderOption>\r\n\r\n                <HeaderOption>\r\n                    <OptionLineOne>Returns</OptionLineOne>\r\n                    <OptionLineTwo>& Orders</OptionLineTwo>\r\n                </HeaderOption>\r\n\r\n                \r\n                <HeaderOptionCart>\r\n                    <Link to=\"/cart\">\r\n                        <ShoppingBasketIcon />\r\n                        <CartCount>\r\n                            {getCount()}\r\n                        </CartCount>\r\n                    </Link>\r\n                </HeaderOptionCart>\r\n                \r\n\r\n\r\n            </HeaderNavItems>\r\n            \r\n        </HeaderContainer>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\n\r\n// The whole container of the header component\r\n\r\nconst HeaderContainer = styled.div`\r\n    height: 60px;\r\n    background-color: #0F1111;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    color: white;\r\n\r\n\r\n`\r\n\r\n// store logo inside the header container\r\n\r\nconst HeaderLogo = styled.div`\r\n    img {\r\n        width: 100px;\r\n        margin-left: 11px;\r\n\r\n    }\r\n\r\n`\r\n// part inside the header where you put your location\r\n\r\nconst HeaderOptionAdress = styled.div`\r\n    padding-left: 9px;\r\n    display:flex;\r\n    align-items: center;\r\n`\r\n// first line of the HeaderOptionAdress\r\n\r\nconst OptionLineOne = styled.div`\r\n\r\n\r\n\r\n`\r\n\r\n// Second line of the headerOptionAdress\r\n\r\nconst OptionLineTwo = styled.div`\r\n    font-weight: 700;\r\n\r\n\r\n`\r\n\r\n// Search bar inside the header\r\n\r\nconst HeaderSearch = styled.div`\r\n    display:flex;\r\n    flex-grow: 1;\r\n    height: 40px;\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n    margin-left: 5px;\r\n    background-color: white;\r\n\r\n    :focus-within {\r\n        box-shadow: 0 0 0 3px #F90;\r\n    }\r\n    \r\n`\r\n// input field inside the search bar in the header.\r\n\r\nconst HeaderSearchInput = styled.input`\r\n    flex-grow: 1;\r\n    border: 0;\r\n    :focus {\r\n        outline: none;\r\n    }\r\n\r\n`\r\n\r\n// div to hold the icon of the search input field in the header\r\n\r\nconst HeaderSearchIconContainer = styled.div`\r\n    background-color: #febd69;\r\n    width: 45px;\r\n    color: black;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n`\r\n\r\n// The last part of the header containing a navigation menu.\r\n\r\nconst HeaderNavItems = styled.div`\r\n    display: flex;\r\n`\r\n\r\n// header option is each of the divs inside the header navitems styled div.\r\n\r\nconst HeaderOption = styled.div`\r\n    padding: 10px 9px;\r\n    cursor:pointer;\r\n\r\n\r\n`\r\n// Last item in the header with the icon.\r\nconst HeaderOptionCart = styled.div`\r\n    display: flex;\r\n\r\n    a {\r\n        display: flex;\r\n        align-items: center;\r\n        padding-right: 9px;\r\n        color: white;\r\n        text-decoration: none;\r\n\r\n    }\r\n`\r\n\r\n// counter inside the last div of the header\r\n\r\nconst CartCount = styled.div`\r\n    font-weight: 700;\r\n    color: #f08804;\r\n    padding-left: 4px;\r\n`","\r\n\r\nimport firebase from \"firebase/compat/app\"\r\nimport \"firebase/compat/auth\"\r\nimport \"firebase/compat/firestore\"\r\nimport \"firebase/compat/storage\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBAfvTHdNgM24MOa_MJatd9Y0TpUdHoSmY\",\r\n    authDomain: \"clone-gmk.firebaseapp.com\",\r\n    projectId: \"clone-gmk\",\r\n    storageBucket: \"clone-gmk.appspot.com\",\r\n    messagingSenderId: \"1083792848047\",\r\n    appId: \"1:1083792848047:web:58ba555976942dd103d05a\",\r\n    measurementId: \"${config.measurementId}\"\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nconst db = firebase.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n// const storage =firebase.storage();\r\n\r\n// export { auth,provider,storage};\r\nexport { db, auth, provider } ;","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { db } from './firebase'\r\n// This component hold each item that is already on the cart.\r\n\r\nfunction CartItem( { id, item}) {\r\n\r\n// function that delete the item in the cart when the delete button is press.\r\n\r\n\r\n    const deleteItem = (e) => {\r\n        e.preventDefault()\r\n        db.collection('cartItems').doc(id).delete();\r\n    } \r\n\r\n    let options = []\r\n\r\n    for (let i =1; i<Math.max(item.quantity + 1, 21); i++){\r\n        options.push(<option value={i}>Qty: {i} </option>)\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n    // function that changes the quantity in to the database when the select button is changed\r\n    // use the cartItems collection and grabs de id of the item to change the quantity of the item\r\n    const changeQuantity = (newQuantity) => {\r\n        db.collection('cartItems').doc(id).update({\r\n            quantity: parseInt(newQuantity)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <ImageContainer>\r\n                <img src={item.image} />\r\n            </ImageContainer>\r\n            <CartItemInfo>\r\n                <CartItemInfoTop>\r\n                    <h2>{item.name}</h2>\r\n                </CartItemInfoTop>\r\n                <CartItemInfoBottom>\r\n                    <CartItemQuantity>\r\n                        <select\r\n                            value={item.quantity}\r\n                            onChange= {(e) => changeQuantity(e.target.value)}\r\n                        >\r\n                            {options}\r\n                        </select>\r\n                    \r\n                    </CartItemQuantity>\r\n                    <CartItemDeleteContainer\r\n                        onClick = {deleteItem}\r\n                    >\r\n                        Delete\r\n                    </CartItemDeleteContainer>\r\n                </CartItemInfoBottom>\r\n            </CartItemInfo>\r\n            <CartItemPrice>\r\n                ${item.price}\r\n            </CartItemPrice>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CartItem\r\n\r\nconst Container = styled.div`\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    display: flex;\r\n    border-bottom: 1px solid #DDD;\r\n\r\n`\r\n\r\nconst ImageContainer = styled.div`\r\n    whidth: 180px;\r\n    height: 180px;\r\n    flex-shrink: 0;\r\n    flex-grow: 0;\r\n    margin-right: 16px;\r\n\r\n    img {\r\n        object-fit: contain;\r\n        height: 100%;\r\n        whidth: 100%;\r\n    }\r\n\r\n`\r\n\r\n\r\n\r\nconst CartItemInfo = styled.div`\r\n    flex-grow:1;\r\n`\r\n\r\n\r\nconst CartItemInfoTop = styled.div`\r\n    color: #007185;\r\n\r\n    h2 {\r\n        font-size: 18px;\r\n    }\r\n\r\n`\r\n\r\nconst CartItemInfoBottom = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin-top: 4px;\r\n\r\n`\r\n\r\nconst CartItemQuantity = styled.div`\r\n    select {\r\n        border-radius: 7px;\r\n        background-color: #F0F2F2;\r\n        padding: 8px;\r\n        box-shadow: 0 2px 5px rgba(15, 17, 17, .15);\r\n        font-size: 16px;\r\n    }\r\n\r\n    select:focus {\r\n        outline: none;\r\n    }\r\n`\r\n\r\nconst CartItemDeleteContainer = styled.div`\r\n    color: #007185;\r\n    margin-left: 16px;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n\r\n`\r\n\r\n\r\nconst CartItemPrice = styled.div`\r\n    font-size: 18px;\r\n    font-weight: 700;\r\n    margin-left: 16px;\r\n`","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport CartItem from './CartItem'\r\n\r\n// This component holds the left seccion of all the items in to the cart page.\r\n\r\n\r\nfunction CartItems( {cartItems }) {\r\n    return (\r\n        <Container>\r\n            <Title>Shopping Cart</Title>\r\n            <hr/>\r\n            <ItemsContainer>\r\n                {\r\n                    cartItems.map((item)=> (\r\n                        <CartItem \r\n                            id= {item.id}\r\n                            item  = {item.product}\r\n\r\n\r\n\r\n                        />\r\n                    ))\r\n                }\r\n            </ItemsContainer>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CartItems\r\n\r\n\r\nconst Container = styled.div`\r\n   \r\n    background-color: white;\r\n    flex: 0.7;\r\n    margin-right: 18px;\r\n    padding: 20px;\r\n\r\n\r\n`\r\n\r\nconst Title = styled.h1`\r\n    margin-bottom: 8px;\r\n`\r\n\r\nconst ItemsContainer = styled.div``","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport NumberFormat from 'react-number-format'\r\n\r\n// in the cart total component we pass the gettotalprice and the getCOunt functions from the cart.\r\n// getTotalPrice calculate the total price of the items on the cart\r\n// getCount count how many items are in the cart. \r\n// i also use numberFormat to format the total price number.\r\n\r\nfunction CartTotal( { getTotalPrice, getCount }) {\r\n    return (\r\n        <Container>\r\n            <Subtotal>SubTotal ({getCount()} items):  \r\n            \r\n                <NumberFormat value={getTotalPrice()} displayType='text' thousandSeparator={true} prefix= {'$'} />\r\n               \r\n            \r\n            \r\n            </Subtotal>\r\n            \r\n            <CheckOutButton>\r\n                Proceed to checkout\r\n            </CheckOutButton>\r\n        </Container>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default CartTotal\r\n\r\n\r\nconst Container = styled.div`\r\n    \r\n    background-color: white;\r\n    flex: 0.3;\r\n    padding: 20px;\r\n`\r\nconst Subtotal = styled.h2`\r\n    margin-bottom: 16px;\r\n\r\n`\r\n\r\n\r\n\r\nconst CheckOutButton = styled.button`\r\n    background-color: #f0c14b;\r\n    width: 100%;\r\n    padding: 4px 8px;\r\n    border: 2px solid #a88734;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n\r\n    :hover {\r\n        background: #ddb347;\r\n    }\r\n\r\n\r\n`","import React from 'react'\r\n\r\nimport styled from 'styled-components'\r\nimport CartItems from './CartItems'\r\nimport CartTotal from './CartTotal'\r\n\r\n\r\nfunction Cart({ cartItems }) {\r\n\r\n    const getTotalPrice = () => {\r\n        let total = 0;\r\n        cartItems.forEach((item) => {\r\n            total += (item.product.price * item.product.quantity)\r\n        })\r\n        return total;\r\n    }\r\n\r\n\r\n    const getCount = () => {\r\n        let count = 0;\r\n        // first loop through all the cart items\r\n        cartItems.forEach((item) => {\r\n            // add the quantity of each one to total.\r\n            count += item.product.quantity;\r\n\r\n        })\r\n\r\n        return count;\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <CartItems cartItems = { cartItems }/>\r\n            <CartTotal getCount = { getCount } getTotalPrice = {getTotalPrice}/>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 14px 18px 0 18px;\r\n\r\n`","import React from 'react'\r\n\r\nimport styled from 'styled-components'\r\nimport { db } from './firebase'\r\n\r\n\r\n// I add the props argument in to the Product component to be able to grab the information from the database\r\n// This information is been rendered in the Homepage component.\r\n\r\n// Add to cart function grabs the element selected and if exist already in the cart add 1 to the quantity.\r\n// if the element doesnt exist is gonna added to the database.\r\n\r\nfunction Product({ title, price, rating, image, id}) {\r\n\r\n    const addToCart = () => {\r\n        const cartItem = db.collection('cartItems').doc(id);\r\n        cartItem.get()\r\n        .then((doc) => {\r\n            if(doc.exists){\r\n                cartItem.update({\r\n                    quantity: doc.data().quantity + 1\r\n                    \r\n                })\r\n            }else {\r\n                db.collection('cartItems').doc(id).set({\r\n                    name: title,\r\n                    image: image,\r\n                    price: price,\r\n                    quantity: 1\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Title>\r\n                { title }\r\n            </Title>\r\n            <Price>\r\n                ${ price }\r\n            </Price>\r\n            <Rating>\r\n                {\r\n                    Array(rating)\r\n                    .fill()\r\n                    .map(rating=> <img src='https://image.shutterstock.com/image-illustration/gold-star-isolated-on-white-260nw-709961740.jpg'/>) \r\n                }\r\n            </Rating>\r\n            <Image src={image} />\r\n            <AddToCartContainer>\r\n                <AddToCartButton \r\n                    onClick= {addToCart}\r\n                >\r\n                    Add to cart\r\n                </AddToCartButton>   \r\n            </AddToCartContainer>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Product\r\n\r\n\r\nconst Container = styled.div`\r\n    background: white;\r\n    z-index: 100;\r\n    max-height: 400px;\r\n    flex: 1;\r\n    padding: 20px;\r\n    margin: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n   \r\n    \r\n\r\n`\r\n\r\nconst Title = styled.span`\r\n    min-height: 50px;\r\n`\r\n\r\nconst Price = styled.span`\r\n    font-weight: 500;\r\n    margin-top: 3px;\r\n`\r\n\r\nconst Rating = styled.div`\r\n    img {\r\n        width: 15px;\r\n        height: 10px;\r\n        margin: 1px 1px;\r\n    }\r\n`\r\n\r\n\r\n// use object-fit contain to make the image to dont strech out because of the height.\r\nconst Image = styled.img`\r\n    max-height: 200px;\r\n    object-fit: contain;\r\n`\r\n\r\nconst AddToCartContainer = styled.div`\r\n    display: grid;\r\n    place-items: center;\r\n    margin-top: 12px;\r\n`\r\n\r\nconst AddToCartButton = styled.button`\r\n\r\n    width: 100px;\r\n    height: 30px;\r\n    background-color: #f0c14b;\r\n    border: 2px solid #a88734;\r\n    border-radius: 2px;\r\n    cursor: pointer;\r\n\r\n`","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Product from './Product'\r\n\r\nimport { db } from './firebase'\r\n\r\nfunction Home() {\r\n\r\n    const [products, setProducts] = useState([])\r\n\r\n    // this grabs the products on time from the database to show them in to the application\r\n    // They get saved in the temp products variable wich is an estructure grabing the id and the other information\r\n    // in to the product variable.\r\n    // with setProducts(tempProducts) we set the state of the products as in the database in the moment\r\n\r\n    const getProducts = () => {\r\n        db.collection('products').onSnapshot((snapshot)=>{\r\n            let tempProducts = []\r\n\r\n            tempProducts = snapshot.docs.map((doc)=>( \r\n                {\r\n                    id: doc.id,\r\n                    product: doc.data()            \r\n                }\r\n            ));\r\n            setProducts(tempProducts);\r\n        })\r\n    }\r\n\r\n    // useEfect is preventing from the page to refresh infinite times while using the getproducts function\r\n    //  using [] in the end of the useEfect indicates to just run the funtion one time\r\n\r\n    useEffect(() => {\r\n        getProducts()\r\n    }, [])\r\n       \r\n\r\n  \r\n    \r\n\r\n// with the map before product will render one by one the products from the database\r\n// Then I pass inside the product component the data from each product in the maping\r\n\r\n\r\n    return (\r\n        \r\n        <Container>\r\n            <Banner>\r\n\r\n            </Banner>\r\n            <Content>\r\n\r\n                {\r\n                    products.map((data)=>(\r\n                        <Product \r\n                            title={data.product.name}\r\n                            price={data.product.price}\r\n                            rating={data.product.rating}\r\n                            image={data.product.image}\r\n                            id = {data.id}\r\n\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            \r\n            </Content>\r\n        \r\n        </Container>\r\n        \r\n    )\r\n}\r\n\r\nexport default Home\r\n\r\n\r\nconst Container = styled.div`\r\n    max-width: 1500px;\r\n    margin: 0 auto;\r\n`\r\n// contains the background image of the home page\r\n// use mask image to create a gradient in the image with the oposit color\r\n\r\nconst Banner = styled.div`\r\n    background-image: url('https://i.imgur.com/SYHeuYM.jpg');\r\n    min-height: 600px;\r\n    background-position: center;\r\n    background-size: cover;\r\n    mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0));\r\n    z-index: 1;\r\n\r\n`\r\n\r\n\r\nconst Content = styled.div`\r\n        \r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    margin-top: -350px;\r\n   \r\n    display: grid;\r\n    grid-template-columns: 12fr 10fr 8fr;\r\n    \r\n\r\n`","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { auth, provider } from './firebase'\r\n\r\n\r\nfunction Login( { setUser }) {\r\n    \r\n    // this function take the information from the user that make a login in to a google account.\r\n    //  it use the google verification configurated in firebase.js. and create a new state from the user\r\n    // with the information gatheres from the google acount.\r\n    // also use localstorage to save the status and the user dont get erased when refreshing the page.\r\n    \r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider).then((result)=>{\r\n            let user = result.user;\r\n            let newUser =   {\r\n                name: user.displayName,\r\n                email: user.email,\r\n                photo: user.photoURL,\r\n\r\n            }\r\n            localStorage.setItem('user', JSON.stringify(newUser))\r\n            setUser(newUser);\r\n        }).catch((error)=>{\r\n            alert(error.message);\r\n        })\r\n    }\r\n    \r\n    \r\n    \r\n    return (\r\n        <Container>\r\n            <Content>\r\n                <AmazonLogo src='http://media.corporate-ir.net/media_files/IROL/17/176060/Oct18/Amazon%20logo.PNG'/>\r\n                <h1>Sign in to Amazon</h1>\r\n                <LoginButton\r\n                    onClick = {signIn}\r\n                >\r\n                    Sign in with Google\r\n                </LoginButton>\r\n\r\n\r\n            </Content>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    background-color: #f8f8f8;\r\n    display: grid;\r\n    place-items: center;\r\n`\r\n\r\nconst Content = styled.div`\r\n    padding: 100px;\r\n    background-color: white;\r\n    border-radius: 5px;\r\n    box-shadow: 0 1px 3px gray; \r\n    text-align: center;\r\n`\r\n\r\n\r\nconst AmazonLogo = styled.img`\r\n    height: 100px;\r\n    margin-bottom: 40px;\r\n\r\n\r\n`\r\n\r\n\r\nconst LoginButton = styled.button`\r\n    margin-top: 50px;\r\n    background-color: #f0c14b;\r\n    height: 40px;\r\n    border: 2px solid #a88734;\r\n    border-radius: 4px;\r\n    padding: 4px 8px;\r\n    cursor: pointer;\r\n`\r\n","\nimport { useState, useEffect } from 'react'\n\nimport './App.css';\nimport Header from './components/Header'\nimport Cart from './components/Cart'\nimport Home from './components/Home'\nimport Login from './components/Login';\nimport styled from 'styled-components';\nimport { db, auth } from './components/firebase'\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport CartItems from './components/CartItems';\n\n\n\nfunction App() {\n  const [ user, setUser ] = useState(JSON.parse(localStorage.getItem('user')));\n  const [ cartItems, setCartItems ] = useState([]);\n\n  const getCartItems = () => {\n    db.collection('cartItems').onSnapshot((snapshot) => {\n      const tempItems = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        product: doc.data()\n      }));\n      setCartItems(tempItems);\n\n    })\n  }\n\n  // singOut function\n  // uses the auth funtionality to sign out then if was succesfully set the user to null.\n  // also cleans the user from the local storage.\n\n  const signOut = () => {\n    auth.signOut().then(() => {\n      setUser(null)\n      localStorage.removeItem('user')\n    });\n\n  }\n\n\n\n  useEffect(() => {\n    getCartItems();\n  }, [])\n\n    \n  \n   \n\n\n\n  return (\n\n\n    <Router>\n\n      {\n        !user ? (\n          <Login setUser={setUser} />\n        ) : (\n\n          <Container>\n            <Header \n              user={user}\n              cartItems={cartItems}\n              signOut = {signOut}\n            />\n            \n            <Routes>\n              <Route path=\"/\" element={<Home />} />\n              \n              <Route path=\"/cart\" element={<Cart cartItems={cartItems}/>} />\n            </Routes>\n\n            \n          </Container>\n        )\n      }\n      \n    </Router>\n  );\n}\n\nexport default App;\n\nconst Container = styled.div`\n  background-color: #EAEDED;\n`","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}